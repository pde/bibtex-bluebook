% Bibliography style for footnote references.  The citation is t
% complete reference the first time, and a shorter reference the
% following times.  It uses an optional shorttitle entry in the database
% for the short reference.  For use with inlinebib.sty.

% Changes made are Copyright (C) 1999 René Seindal

% This program can redistributed and/or modified under the terms
% of the LaTeX Project Public License Distributed from CTAN
% archives in directory macros/latex/base/lppl.txt; either
% version 1 of the License, or (at your option) any later version.

% BibTeX standard bibliography style `plain'
        % version 0.99a for BibTeX versions 0.99a or later, LaTeX version 2.09.
        % Copyright (C) 1985, all rights reserved.
        % Copying of this file is authorized only if either
        % (1) you make absolutely no changes to your copy, including name, or
        % (2) if you do make changes, you name it something other than
        % btxbst.doc, plain.bst, unsrt.bst, alpha.bst, and abbrv.bst.
        % This restriction helps ensure that all standard styles are identical.
        % The file btxbst.doc has the documentation for this style.

ENTRY
  { address
    author
    booktitle
    chapter
    edition
    editor
    howpublished
    onlineonly
    institution
    journal
    key
    month
    note
    number
    organization
    pages
    publisher
    school
    shortauthor
    shorttitle
    series
    title
    type
    url
    volume
    year
  }
  {}
  { label }

INTEGERS { output.state before.all mid.sentence after.sentence after.block 
                before.note}

INTEGERS { short.title.max.length }

FUNCTION {init.state.consts}
{ #0 'before.all :=
  #1 'mid.sentence :=
  #2 'after.sentence :=
  #3 'after.block :=
  #4 'before.note :=

  #50 'short.title.max.length :=
}

STRINGS { s t }

FUNCTION {output.nonnull}
{ 's :=
%  cite$ "  >>>" * s * "<<<  " * output.state int.to.str$ * warning$
  output.state mid.sentence =
    { ", " * write$ }
    { output.state after.block =
        { ", " * write$   % add.period$ write$
          newline$
          "\newblock " write$
        }
        { output.state before.all =
            'write$
            { output.state before.note =
                { write$
                  " \note " add.period$ write$
                  note missing$
                    'skip$
                    { newline$
                      "\newblock " write$
                    }
                  if$
                }
                { add.period$ " " * write$ }
              if$
            }
          if$
        }
      if$
      mid.sentence 'output.state :=
    }
  if$
%  cite$ "x >>>" * s * "<<<  " * output.state int.to.str$ * warning$
  s
}

FUNCTION {output.nonnull.nocomma}
{ 's :=
%  cite$ "  >>>" * s * "<<<  " * output.state int.to.str$ * warning$
  output.state mid.sentence =
    { " " * write$ }
    { output.state after.block =
        { " " * write$   % add.period$ write$
          newline$
          "\newblock " write$
        }
        { output.state before.all =
            'write$
            { output.state before.note =
                { write$
                  " \note " add.period$ write$
                  note missing$
                    'skip$
                    { newline$
                      "\newblock " write$
                    }
                  if$
                }
                { add.period$ " " * write$ }
              if$
            }
          if$
        }
      if$
      mid.sentence 'output.state :=
    }
  if$
%  cite$ "x >>>" * s * "<<<  " * output.state int.to.str$ * warning$
  s
}

FUNCTION {output}
{ duplicate$ empty$
    'pop$
    'output.nonnull
  if$
}

FUNCTION {output.nocomma}
{ duplicate$ empty$
    'pop$
    'output.nonnull.nocomma
  if$
}

FUNCTION {output.check}
{ 't :=
  duplicate$ empty$
    { pop$ "empty " t * " in " * cite$ * warning$ }
    'output.nonnull
  if$
}

FUNCTION {output.check.nocomma}
{ 't :=
  duplicate$ empty$
    { pop$ "empty " t * " in " * cite$ * warning$ }
    'output.nonnull.nocomma
  if$
}

FUNCTION {output.bibitem}
{ newline$
  "\bibitem{" write$
  cite$ write$
  "}" write$
  newline$
  ""
  before.all 'output.state :=
}

FUNCTION {fin.entry}
{ add.period$
  write$
  newline$
}

FUNCTION {new.block}
{ output.state before.all =
    'skip$
    { after.block 'output.state := }
  if$
}

FUNCTION {new.sentence}
{ output.state after.block =
    'skip$
    { output.state before.all =
        'skip$
        { after.sentence 'output.state := }
      if$
    }
  if$
}

FUNCTION {output.note}
{ before.note 'output.state :=
  note missing$
    { "" }
    { note }
  if$
  output.nonnull
}

FUNCTION {not}
{   { #0 }
    { #1 }
  if$
}

FUNCTION {and}
{   'skip$
    { pop$ #0 }
  if$
}

FUNCTION {or}
{   { pop$ #1 }
    'skip$
  if$
}

FUNCTION {new.block.checka}
{ empty$
    'skip$
    'new.block
  if$
}

FUNCTION {new.block.checkb}
{ empty$
  swap$ empty$
  and
    'skip$
    'new.block
  if$
}

FUNCTION {new.sentence.checka}
{ empty$
    'skip$
    'new.sentence
  if$
}

FUNCTION {new.sentence.checkb}
{ empty$
  swap$ empty$
  and
    'skip$
    'new.sentence
  if$
}

FUNCTION {field.or.null}
{ duplicate$ empty$
    { pop$ "" }
    'skip$
  if$
}

FUNCTION {emphasize}
{ duplicate$ empty$
    { pop$ "" }
    { "{\em " swap$ * "}" * }
  if$
}

FUNCTION {smallcaps}
{ duplicate$ empty$
    { pop$ "" }
    { "{\sc " swap$ * "}" * }
  if$
}

INTEGERS { nameptr namesleft numnames }

FUNCTION {format.names}
{ 's :=
  #1 'nameptr :=
  s num.names$ 'numnames :=

  numnames #2 >
    { s nameptr "{ff~}{vv~}{ll}{, jj}" format.name$ " \etal" * }
    { % original inlinebib code
      numnames 'namesleft :=
        { namesleft #0 > }
        { s nameptr "{ff~}{vv~}{ll}{, jj}" format.name$ 't :=
          nameptr #1 >
            { namesleft #1 >
                { ", " * t * }
                { t "others" =
                    { " et al." * }
                    { " and " * t * }
                  if$
                }
              if$
            }
            't
          if$
          nameptr #1 + 'nameptr :=
          namesleft #1 - 'namesleft :=
        }
      while$
    }
  if$
}

FUNCTION {format.authors}
{ author empty$
    { "" }
    { author format.names }
  if$
}

FUNCTION {format.editors}
{ editor empty$
    { "" }
    { editor format.names
      editor num.names$ #1 >
        { ", eds." * }
        { ", ed." * }
      if$
    }
  if$
}


%FUNCTION {format.title}
%{ title empty$
%    { "" }
%    { title "t" change.case$ "``" swap$ * "''" * }
%  if$
%}

FUNCTION {format.title}
{ title empty$
    { "" }
    { "{\em " title * "}" * }
  if$
}

FUNCTION {n.dashify}
{ 't :=
  ""
    { t empty$ not }
    { t #1 #1 substring$ "-" =
        { t #1 #2 substring$ "--" = not
            { "--" *
              t #2 global.max$ substring$ 't :=
            }
            {   { t #1 #1 substring$ "-" = }
                { "-" *
                  t #2 global.max$ substring$ 't :=
                }
              while$
            }
          if$
        }
        { t #1 #1 substring$ *
          t #2 global.max$ substring$ 't :=
        }
      if$
    }
  while$
}

FUNCTION {format.date}
{ year empty$
    { month empty$
        { "" }
        { "there's a month but no year in " cite$ * warning$
          month
        }
      if$
    }
    { month empty$
        {  "("  year * ")" * }
        { month " " * year * }
      if$
    }
  if$
}



FUNCTION {format.btitle}
{ title emphasize
}

FUNCTION {tie.or.space.connect}
{ duplicate$ text.length$ #3 <
    { "~" }
    { " " }
  if$
  swap$ * *
}

FUNCTION {either.or.check}
{ empty$
    'pop$
    { "can't use both " swap$ * " fields in " * cite$ * warning$ }
  if$
}

FUNCTION {format.bvolume}
{ volume empty$
    { "" }
    { "volume" volume tie.or.space.connect
      series empty$
        'skip$
        { " by " * series emphasize * }
      if$
      "volume and number" number either.or.check
    }
  if$
}

FUNCTION {format.number.series}
{ volume empty$
    { number empty$
        { series field.or.null }
        { output.state mid.sentence =
            { "number" }
            { "Number" }
          if$
          number tie.or.space.connect
          series empty$
            { "there's a number but no series in " cite$ * warning$ }
            { " in " * series * }
          if$
        }
      if$
    }
    { "" }
  if$
}

FUNCTION {format.edition}
{ edition empty$
    { "" }
    { output.state mid.sentence =
        { edition "l" change.case$ " edition " * }
        { edition "t" change.case$ " edition " * }
      if$
    }
  if$
}

FUNCTION {format.lots.date}
{ year empty$
        { "No year in " cite$ * warning$ }
        { "(" format.editors * format.edition * year * ")" *}
  if$
}

FUNCTION {format.url}
{ url empty$
    { "" }
    { onlineonly empty$
      { "" }
      { "{\em " onlineonly * "} " * }
      if$
      "\url{" * url * "}" *
    }
  if$
}

INTEGERS { multiresult }

FUNCTION {multi.page.check}
{ 't :=
  #0 'multiresult :=
    { multiresult not
      t empty$ not
      and
    }
    { t #1 #1 substring$
      duplicate$ "-" =
      swap$ duplicate$ "," =
      swap$ "+" =
      or or
        { #1 'multiresult := }
        { t #2 global.max$ substring$ 't := }
      if$
    }
  while$
  multiresult
}

STRINGS { startpage char }

FUNCTION {first.page.in.range}
{ 't :=
  #0 'multiresult :=
  "" 'startpage :=
    { multiresult not
      t empty$ not
      and
    }
    { t #1 #1 substring$
      'char :=
      char "-" =
      char "," =
      char "+" =
      or or
        { #1 'multiresult := }
        { 
          startpage char * 'startpage :=
          t #2 global.max$ substring$ 't :=
        }
      if$
    }
  while$
  startpage
}

FUNCTION {format.pages}
{ pages empty$
    { "" }
    { pages multi.page.check
	{ "pp." pages n.dashify tie.or.space.connect }
	{ "p." pages tie.or.space.connect }
      if$
    }
  if$
}

FUNCTION {format.pages.norange}
{ pages empty$
    { "" }
    { pages multi.page.check
        { 
          pages
          first.page.in.range
        }
        { "p." pages tie.or.space.connect }
        %{ "pp." pages n.dashify tie.or.space.connect }
        %{ "p." pages tie.or.space.connect }
      if$
    }
  if$
}

FUNCTION {format.vol.num.pages}
{ volume field.or.null
  number empty$
    'skip$
    { "(" number * ")" * *
      volume empty$
        { "there's a number but no volume in " cite$ * warning$ }
        'skip$
      if$
    }
  if$
  pages empty$
    'skip$
    { duplicate$ empty$
        { pop$ format.pages }
        { ":" * pages n.dashify * }
      if$
    }
  if$
}

FUNCTION {format.volume}
{ volume field.or.null
  }

FUNCTION {format.chapter.pages}
{ chapter empty$
    'format.pages
    { type empty$
        { "chapter" }
        { type "l" change.case$ }
      if$
      chapter tie.or.space.connect
      pages empty$
        'skip$
        { ", " * format.pages * }
      if$
    }
  if$
}

% the editors need to move!
FUNCTION {format.in.ed.booktitle}
{ booktitle empty$
    { "" }
    { editor empty$
        { "{\em in} " booktitle smallcaps * }
        { "{\em in} " format.editors * ", " * booktitle smallcaps * }
      if$
    }
  if$
}
FUNCTION {format.in.booktitle}
{ booktitle empty$
        { "" }
        { "{\em in} " booktitle smallcaps * }
  if$
}
FUNCTION {empty.misc.check}
{ author empty$ title empty$ howpublished empty$
  month empty$ year empty$ note empty$
  and and and and and
  key empty$ not and
    { "all relevant fields are empty in " cite$ * warning$ }
    'skip$
  if$
}

FUNCTION {format.thesis.type}
{ type empty$
    'skip$
    { pop$
      type "t" change.case$
    }
  if$
}

FUNCTION {format.tr.number}
{ type empty$
    { "Technical Report" }
    'type
  if$
  number empty$
    { "t" change.case$ }
    { number tie.or.space.connect }
  if$
}

FUNCTION {format.article.crossref}
{ "in: \cite{" crossref * "}" *
}

FUNCTION {format.book.crossref}
{ volume empty$
    { "in: " }
    { "volume" volume tie.or.space.connect " of: " *
    }
  "\cite{" * crossref * "}" *
}

FUNCTION {format.incoll.inproc.crossref}
{ "in: \cite{" crossref * "}" *
}

FUNCTION {format.names.short}
{ 's :=
  #1 'nameptr :=
  s num.names$ 'numnames :=

  numnames #2 >
    { s nameptr "{ff~}{vv~}{ll}" format.name$ " \etal" * }
    { % original inlinebib code
      numnames 'namesleft :=
        { namesleft #0 > }
        { s nameptr "{vv~}{ll}" format.name$ 't :=
          nameptr #1 >
            { namesleft #1 >
                { ", " * t * }
                { t "others" =
                    { " et al." * }
                    { " \& " * t * }
                  if$
                }
              if$
            }
            't
          if$
          nameptr #1 + 'nameptr :=
          namesleft #1 - 'namesleft :=
        }
      while$
    }
  if$
}

FUNCTION {format.author.short}
{ author empty$
    { "" }
    { author format.names.short }
  if$
}


FUNCTION {format.author.short.inlinebib}
{ ""
  author empty$
  shortauthor empty$
  editor empty$
  and and
%    { "no author or editor for short reference of " cite$ * warning$ }
    'skip$
    { shortauthor empty$
        { author empty$
            'editor
            'author
          if$
        }
        { author empty$
            'shortauthor
            { author text.length$
              shortauthor text.length$
              <
                'author
                'shortauthor
              if$
            }
          if$
        }
      if$
  
      's :=
      s num.names$ 'numnames :=
        numnames #0 >
        { s #1 "{vv~}{ll}" format.name$ *
          numnames #1 >
            { " et al." * }
            { "" * }
          if$
        }
        { "" * }
      if$
    }
  if$
}

INTEGERS { tmp title.length }

FUNCTION {shorten.title}
{ 's :=
  s text.length$ 'title.length :=
%  "TITLE1=" quote$ * s * quote$ * warning$
  #2 'tmp :=
    { tmp title.length - #1 < }
    { s tmp text.prefix$ 't :=
%      ">>>" t * "<<< " * tmp int.to.str$ * warning$
      t #-1 #2 substring$ ". " =
      t #-1 #2 substring$ ": " =
      or not
        'skip$
        { s tmp #2 - text.prefix$ 's := 
          title.length 'tmp := 
        }
      if$
      tmp #1 + 'tmp := 
    }
  while$ 
%  "TITLE2=" quote$ * s * quote$ * warning$
  s
}

FUNCTION {format.title.short}
{
  shorttitle missing$
    { title field.or.null
      shorten.title
      duplicate$ text.length$ 'tmp :=
      tmp short.title.max.length >
        { "shortened title for " cite$ * " is still " *
          tmp short.title.max.length - int.to.str$ *
          " characters too long" * warning$
        }
        'skip$
      if$
    }
    { shorttitle
      duplicate$
      text.length$ 'tmp :=
      tmp short.title.max.length >
        { "specified shorttitle for " cite$ * " is " *
          tmp short.title.max.length - int.to.str$ *
          " characters too long" * warning$
        }
        'skip$
      if$
    }
  if$

  duplicate$ empty$
    { "no short title for " cite$ * " screwing up." * warning$ }
    { "\/" * emphasize }
  if$

  volume missing$
    'skip$
    { type$ "book" =
        { ", vol.~" * volume *
        }
        'skip$
      if$
    }
  if$
}

FUNCTION {format.shortref}
{ before.all 'output.state :=
  "\short "
  % no titles in the Bluebook
  % format.author.short output
  % format.title.short " \end" * output 
   format.author.short "{,} \end" * output   %why are the {}s necessary?
%  duplicate$ ">>>> " swap$ * " <<<<" * warning$
  write$
  newline$
}

FUNCTION {article}
{ output.bibitem
  format.authors "author" output.check
  new.block
  format.title "title" output.check
  new.block
%  crossref missing$
%    { format.volume output
%      journal smallcaps "journal" output.check.nocomma
%      format.pages.norange output.nocomma
%      format.date "year" output.check.nocomma
%      format.url output
%    }
%    { format.article.crossref output.nonnull
%      format.pages.norange output
%    }
%  if$
  month missing$
    { format.volume output
    }
    'skip$
  if$
  journal smallcaps "journal" output.check.nocomma
  format.pages.norange output.nocomma
  format.date "year" output.check.nocomma
  format.url output
  new.block
  output.note
  fin.entry
  format.shortref
}

FUNCTION {book}
{ output.bibitem
  author empty$
    { format.editors "author and editor" output.check }
    { format.authors smallcaps output.nonnull
      crossref missing$
        { "author and editor" editor either.or.check }
        'skip$
      if$
    }
  if$
  new.block
  title smallcaps "title" output.check
  % cunning hackery to get pincites working
  %"\csname P@" cite$ "\endcsname" * * output
  %"\ifthenelse{\isundef{" cite$ "}}{}{\deref{P@" cite$ "}}" * * * * output
  crossref missing$
    { format.bvolume output
      new.block
      format.number.series output
      new.sentence
      address output
      format.lots.date output
    }
    { new.block
      format.book.crossref output.nonnull
      format.date "year" output.check
    }
  if$
  new.block
  format.url output
  output.note
  fin.entry
  format.shortref
}

FUNCTION {booklet}
{ output.bibitem
  format.authors output
  new.block
  format.title "title" output.check
  howpublished address new.block.checkb
  howpublished output
  address output
  format.date output
  new.block
  format.url output
  output.note
  fin.entry
  format.shortref
}

FUNCTION {inbook}
{ output.bibitem
  author empty$
    { format.editors "author and editor" output.check }
    { format.authors output.nonnull
      crossref missing$
        { "author and editor" editor either.or.check }
        'skip$
      if$
    }
  if$
  new.block
  format.btitle "title" output.check
  crossref missing$
    { format.bvolume output
      format.chapter.pages "chapter and pages" output.check
      new.block
      format.number.series output
      new.sentence
      publisher "publisher" output.check
      address output
    }
    { format.chapter.pages "chapter and pages" output.check
      new.block
      format.book.crossref output.nonnull
    }
  if$
  format.edition output
  format.date "year" output.check
  new.block
  format.url output
  output.note
  fin.entry
  format.shortref
}

FUNCTION {incollection}
{ output.bibitem
  format.authors "author" output.check
  new.block
  format.btitle "title" output.check
  new.block
  crossref missing$
    { format.in.booktitle "booktitle" output.check
      format.bvolume output
      format.number.series output
      format.chapter.pages output
      new.sentence
      address output
      format.lots.date output
    }
    { format.incoll.inproc.crossref output
      format.chapter.pages output
    }
  if$
  new.block
  format.url output
  output.note
  fin.entry
  format.shortref
}

FUNCTION {inproceedings}
{ output.bibitem
  format.authors "author" output.check
  new.block
  format.btitle "title" output.check
  new.block
  crossref missing$
    { format.in.ed.booktitle "booktitle" output.check
      format.bvolume output
      %format.number.series output
      format.pages output
      address empty$
        { %organization publisher new.sentence.checkb
          %organization output
          %publisher output
          format.date "year" output.check.nocomma
        }
        { %address output.nonnull
          format.date "year" output.check.nocomma
          %new.sentence
          %organization output
          %publisher output
        }
      if$
    }
    { format.incoll.inproc.crossref output.nonnull
      format.pages output
    }
  if$
  new.block
  format.url output
  output.note
  fin.entry
  format.shortref
}

FUNCTION {manual}
{ output.bibitem
  author empty$
    { organization empty$
        'skip$
        { organization output.nonnull
          address output
        }
      if$
    }
    { format.authors output.nonnull }
  if$
  new.block
  format.btitle "title" output.check
  author empty$
    { organization empty$
        { address new.block.checka
          address output
        }
        'skip$
      if$
    }
    { organization address new.block.checkb
      organization output
      address output
    }
  if$
  format.edition output
  format.date output
  new.block
  output.note
  fin.entry
  format.shortref
}

FUNCTION {mastersthesis}
{ output.bibitem
  format.authors "author" output.check
  new.block
  format.title "title" output.check
  new.block
  "Speciale" format.thesis.type output.nonnull
  school "school" output.check
  address output
  format.date "year" output.check
  new.block
  format.url output
  output.note
  fin.entry
  format.shortref
}

FUNCTION {misc}
{ output.bibitem
  format.authors output
  title howpublished new.block.checkb
  format.title output
  howpublished new.block.checka
  howpublished output
  format.date output
  new.block
  format.url output
  output.note
  fin.entry
  format.shortref
  empty.misc.check
}

FUNCTION {phdthesis}
{ output.bibitem
  format.authors "author" output.check
  new.block
  format.btitle "title" output.check
  new.block
  "PhD thesis" format.thesis.type output.nonnull
  school "school" output.check
  address output
  format.date "year" output.check
  new.block
  format.url output
  output.note
  fin.entry
  format.shortref
}

FUNCTION {proceedings}
{ output.bibitem
  editor empty$
    'skip$
    { format.editors output.nonnull }
  if$
  new.block
  format.btitle "title" output.check
  format.bvolume output
  format.number.series output
  address empty$
    { % organization publisher new.sentence.checkb
      organization output
      publisher output
      format.date "year" output.check
    }
    { address output.nonnull
      format.date "year" output.check
      new.sentence
      organization output
      publisher output
    }
  if$
  new.block
  output.note
  fin.entry
  format.shortref
}

FUNCTION {techreport}
{ output.bibitem
  format.authors "author" output.check
  new.block
  format.title "title" output.check
  new.block
  format.tr.number output.nonnull
  institution "institution" output.check
  address output
  format.date "year" output.check
  new.block
  format.url output
  output.note
  fin.entry
  format.shortref
}

FUNCTION {unpublished}
{ output.bibitem
  format.authors "author" output.check
  new.block
  format.title "title" output.check
  new.block
  note "note" output.check
  format.date output
  fin.entry
  format.shortref
}

FUNCTION {default.type} { misc }

MACRO {jan} {"January"}

MACRO {feb} {"February"}

MACRO {mar} {"March"}

MACRO {apr} {"April"}

MACRO {may} {"May"}

MACRO {jun} {"June"}

MACRO {jul} {"July"}

MACRO {aug} {"August"}

MACRO {sep} {"September"}

MACRO {oct} {"October"}

MACRO {nov} {"November"}

MACRO {dec} {"December"}


READ

FUNCTION {sortify}
{ purify$
  "l" change.case$
}

INTEGERS { len }

FUNCTION {chop.word}
{ 's :=
  'len :=
  s #1 len substring$ =
    { s len #1 + global.max$ substring$ }
    's
  if$
}

FUNCTION {sort.format.names}
{ 's :=
  #1 'nameptr :=
  ""
  s num.names$ 'numnames :=
  numnames 'namesleft :=
    { namesleft #0 > }
    { nameptr #1 >
        { "   " * }
        'skip$
      if$
      s nameptr "{vv{ } }{ll{ }}{  ff{ }}{  jj{ }}" format.name$ 't :=
      nameptr numnames = t "others" = and
        { "mfl." * }
        { t sortify * }
      if$
      nameptr #1 + 'nameptr :=
      namesleft #1 - 'namesleft :=
    }
  while$
}

FUNCTION {sort.format.title}
{ 't :=
  "A " #2
    "An " #3
      "The " #4 t chop.word
    chop.word
  chop.word
  sortify
  #1 global.max$ substring$
}

FUNCTION {author.sort}
{ author empty$
    { key empty$
        { "to sort, need author or key in " cite$ * warning$
          ""
        }
        { key sortify }
      if$
    }
    { author sort.format.names }
  if$
}

FUNCTION {author.editor.sort}
{ author empty$
    { editor empty$
        { key empty$
            { "to sort, need author, editor, or key in " cite$ * warning$
              ""
            }
            { key sortify }
          if$
        }
        { editor sort.format.names }
      if$
    }
    { author sort.format.names }
  if$
}

FUNCTION {author.organization.sort}
{ author empty$
    { organization empty$
        { key empty$
            { "to sort, need author, organization, or key in " cite$ * warning$
              ""
            }
            { key sortify }
          if$
        }
        { "The " #4 organization chop.word sortify }
      if$
    }
    { author sort.format.names }
  if$
}

FUNCTION {editor.title.sort}
{ editor empty$
    { key empty$
       { title field.or.null sortify }
       { key sortify }
      if$
    }
    { editor sort.format.names }
  if$
}

FUNCTION {presort}
{ type$ "book" =
  type$ "inbook" =
  or
    'author.editor.sort
    { type$ "proceedings" =
        'editor.title.sort
        { type$ "manual" =
            'author.organization.sort
            'author.sort
          if$
        }
      if$
    }
  if$
  "    "
  *
  year field.or.null sortify
  *
  "    "
  *
  title field.or.null
  sort.format.title
  *
  #1 entry.max$ substring$
  'sort.key$ :=
}

ITERATE {presort}

SORT

FUNCTION {begin.bib}
{ preamble$ empty$
    'skip$
    { preamble$ write$ newline$ }
  if$
  "\begin{thebibliography}{}" write$ newline$
}

EXECUTE {begin.bib}

EXECUTE {init.state.consts}

ITERATE {call.type$}

FUNCTION {end.bib}
{ newline$
  "\end{thebibliography}" write$ newline$
}

EXECUTE {end.bib}
